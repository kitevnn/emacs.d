* 🔨 .emacs.d

** 💡 Startup

[[file:archive/Startup1.png]]

[[file:archive/Startup2.png]]

*** 🥕 基本的信息

| 序号 | 信息        | 解释                 |
|------+-------------+----------------------|
|    1 | 环境        | WSL2(2.5.9.0)        |
|    2 | OS发行版    | WSL-archlinux 2.4.13 |
|    3 | Emacs发行版 | GNU Emacs            |
|    4 | 分支        | emacs-feature-igc    |

*** 🪓 开启的特性

#+begin_src sh
CFLAGS="-fmax-errors=1000" ./configure \
    --sysconfdir=/etc \                   # 配置文件默认安装到 /etc
    --prefix=/usr \                       # 安装根路径为 /usr（不是 /usr/local）
    --libexecdir=/usr/lib \               # 内部 helper 程序装到 /usr/lib
    --localstatedir=/var \                # 本地变量文件路径（如缓存）设为 /var
    --disable-build-details \             # 不写入构建时间/主机信息，提高构建可重现性
    --with-harfbuzz \                     # 启用 HarfBuzz，提升字体渲染质量（支持 ligatures）
    --with-libsystemd \                   # 启用对 systemd 的支持
    --with-modules \                      # 启用 Emacs 动态模块支持（支持外部模块）
    --with-x-toolkit=gtk3 \               # 使用 GTK3 图形界面（X11）
    --with-mps=yes \                      # 启用 memory pool system（Emacs GC 的替代实现）
    --with-gnutls=ifavailable \           # 启用 GnuTLS 网络安全库（SSL/TLS），如果有的话（在从elpa获取包安装及更新需要用到）
    --with-rsvg \                         # 开启 rsvg（SVG 支持）
    --with-imagemagick \                  # 开启 ImageMagick 支持
    --with-tree-sitter=ifavailable \      # 使用 tree-sitter（语法高亮引擎）如果可用
    'CFLAGS=-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -g -ffile-prefix-map=/build/emacs/src=/usr/src/debug/emacs -flto=auto' \
    'LDFLAGS=-Wl,-O1 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,-z,pack-relative-relocs -flto=auto'   
#+end_src

** 🎑 GNU Emacs快捷键风格

| 序号 | 快捷键前缀(prefix-key) | 解释意义                       |
|------+-----------------------+-------------------------------|
|    1 | ~C-z C-z~             | *<custom>*                    |
|    2 | ~C-z C-p~             | *<p>* rocess                  |
|    3 | ~C-z C-s~             | *<s>* witch window            |
|    4 | ~C-z C-t~             | *<t>* heme                    |
|    5 | ~C-z C-b~             | *<b>* uffer                   |
|    6 | ~C-z C-w~             | resize *<w>* indow            |
|    7 | ~C-z C-d~             | *<d>* ashboard & *<d>* irvish |
|    8 | ~C-z C-x~             | te *<x>* t                    |
|    9 | ~C-z C-n~             | de *<n>* ote                  |
|   10 | ~C-z C-a~             | *<a>* genda                   |
|   11 | ~C-z C-o~             | *<o>* rg-mode                 |
|   12 | ~C-z C-m~             | e *<m>* ms                    |

** 🔔 MEME

[[https://github.com/kitevnn/dotfiles-archlinux/blob/main/MEME/EmacsTheTrueEditor.png][EmacsTheTrueEditor]]

** 🔑 有趣的实现

*** 1. GNU Emacs总使用时长

从 ~2025年 01月 26日 星期日 13:55:28 CST~ 重新开始累计

#+begin_quote
Accompanying With GNU Emacs: 202 hours, 59 minutes, 49 seconds
#+end_quote

实现过程(展示代码，从而来证明我自己并没有乱写时间上去，因为每次的时间都依赖于 ~(emacs-uptime)~ 此el函数来获取)

*bash方面*
#+begin_src sh
  #!/bin/bash

  # 基本路径配置
  user="une"
  path1=".config/emacs/archive"
  path2=".config/emacs/elisp/site-lisp/sh"
  filename="uptime"

  # 存储文件路径
  file1="/home/${user}/${path1}/${filename}"
  file2="/home/${user}/${path2}/${filename}"

  # 初始化总时间
  total_seconds=0

  # 逐行读取文件内容
  while IFS= read -r line; do
    # 匹配并提取小时、分钟和秒
    if [[ "$line" =~ Uptime:\ ([0-9]+)\ hours?,\ ([0-9]+)\ minutes?,\ ([0-9]+)\ seconds? ]]; then
      hours=${BASH_REMATCH[1]}
      minutes=${BASH_REMATCH[2]}
      seconds=${BASH_REMATCH[3]}
    elif [[ "$line" =~ Uptime:\ ([0-9]+)\ minutes?,\ ([0-9]+)\ seconds? ]]; then
      hours=0
      minutes=${BASH_REMATCH[1]}
      seconds=${BASH_REMATCH[2]}
    elif [[ "$line" =~ Uptime:\ ([0-9]+)\ seconds? ]]; then
      hours=0
      minutes=0
      seconds=${BASH_REMATCH[1]}
    else
      # 如果不匹配任何已知格式，跳过这行
      continue
    fi

    # 将时间转换为秒
    total_seconds=$((total_seconds + hours * 3600 + minutes * 60 + seconds))

  done < "$file1"

  # 可选：将秒数转换为小时:分钟:秒 格式
  total_hours=$((total_seconds / 3600))
  remaining_minutes=$(((total_seconds % 3600) / 60))
  remaining_seconds=$((total_seconds % 60))

  # 输出总时间
  echo "Accompanying With GNU Emacs: $total_hours hours, $remaining_minutes minutes, $remaining_seconds seconds"
  echo "Accompanying With GNU Emacs: $total_hours hours, $remaining_minutes minutes, $remaining_seconds seconds" > "$file2"
#+end_src

*elisp方面*
#+begin_src elisp
  ;; =======================================
  ;; 路径变量 (~/.config/emacs/elisp/basic/basic-file.el)
  ;; =======================================
  (defvar directory-site-lisp               "elisp/site-lisp/sh/")                     ; emacs配置文件路径的modeline部分

  ;; =======================================
  ;; 手动更新已使用的GNU Emacs累加时长 (~/.config/emacs/elisp/custom/custom-defun.el)
  ;; =======================================
  (defun my-save-emacs-uptime ()
    "通过设置钩子hooks，在每次退出Emacs后，自动保存emacs-uptime数据到指定文件内"
    (let ((uptime (emacs-uptime)))
      (with-temp-buffer
        (insert (format "Uptime: %s\n" uptime))
        (append-to-file (point-min) (point-max)  (concat user-emacs-directory directory-emacs-archive "uptime")))))

  (defun my-show-emacs-uptime ()
    "通过site-lisp的sh脚本实现，获取Emacs的累计使用总时长"
    (interactive)
    (let ((uptime-output
           (string-trim (shell-command-to-string
                         (concat user-emacs-directory directory-site-lisp "calculate-uptime.sh")))))
      (insert uptime-output)))


  ;; =======================================
  ;; 更新 calculate-uptime.sh 脚本输出的钩子 (~/.config/emacs/elisp/hooks/hooks-hook.el)
  ;; =======================================
  (add-hook 'kill-emacs-hook 'my-save-emacs-uptime)                            ; 在退出Emacs时保存当前uptime
#+end_src

*** 2. 在modeline上展示 [议程数量] 的信息

*可能哪里会出现一点点错误，但大致上的逻辑就是这样*

#+begin_src elisp
;; ==============================================
;; 设置org-mode必要的关键词
;; ==============================================
(setq org-todo-keywords
      '((sequence "TODO" "DOING" "WAIT" "DONE" "MY")))

  ;; ==============================================
  ;; 生产数据的过程
  ;; ==============================================
  ;; 必要的变量信息
  (defvar file-org-agenda-files               "/home/user/directory-114514/1919810.org" "[文件]: 必须是org文件，因为需要使用org-mode")
  (defvar modeline-agenda-todo-count 0)
  (defvar modeline-agenda-doing-count 0)
  (defvar modeline-agenda-wait-count 0)
  (defvar modeline-agenda-file-name "")

  ;; 设置函数
  (defun kivnn/count-agenda-file-tasks (file-path)
    "更新指定路径议程文件的agenda信息"
    (interactive)
    (setq modeline-agenda-todo-count 0)
    (setq modeline-agenda-doing-count 0)
    (setq modeline-agenda-wait-count 0)
    (setq modeline-agenda-file-name (file-name-nondirectory file-path))
    ;; 打开临时buffer
    (with-temp-buffer
      (insert-file-contents file-path)
      (goto-char (point-min))
      (while (re-search-forward org-heading-regexp nil t)
        (let ((headline (match-string 0)))
          (cond
           ((string-match-p "\\*+ TODO" headline) (setq modeline-agenda-todo-count (1+ modeline-agenda-todo-count)))
           ((string-match-p "\\*+ DOING" headline) (setq modeline-agenda-doing-count (1+ modeline-agenda-doing-count)))
           ((string-match-p "\\*+ WAIT" headline) (setq modeline-agenda-wait-count (1+ modeline-agenda-wait-count))))))))

  ;; 让上述函数只对特定指定文件生效
  ;; 从而统计所有的 "*+ TODO、*+ DOING、*+ WAIT" 的标题数量
  ;; 并更新到 "modeline-agenda-todo-count modeline-agenda-doing-count modeline-agenda-wait-count" 变量上
  (defun kivnn/update-modeline-agenda-file-tasks ()
    "统计指定文件2025.org的任务"
    (kivnn/count-agenda-file-tasks file-org-agenda-files))


  ;; ==============================================
  ;; 展示数据的过程
  ;; ==============================================
  ;; 将 "modeline-agenda-todo-count modeline-agenda-doing-count modeline-agenda-wait-count" 变量设置在modeline上
  (defun kivnn/update-modeline-with-all-scripts ()
    "显示modeline信息"
    (setq global-mode-string
          (list
           "  "
           (format "󰄒 TODO %d " modeline-agenda-todo-count)
           (format "󱞿 DOING %d " modeline-agenda-doing-count)
           (format "󰝕 WAIT %d " modeline-agenda-wait-count)
           "-  "
           modeline-agenda-file-name))
    (setq-default mode-line-format
                  '("%e"
                    ;; a lot of things
                    global-mode-string
                    ;; a lot of things
                    )))

  ;; 自动版
  (run-at-time "0 sec" 1800  'kivnn/update-modeline-agenda-file-tasks)   ; 每30分钟更新一次file-org-agenda-files变量 的指定文件的 "*+ TODO、*+ DOING、*+ WAIT" 的标题数量

  ;; 手动版
  (defun kivnn/update-modeline-all-information ()
    "手动更新状态栏上的所有信息"
    (interactive)
    (kivnn/update-modeline-agenda-file-tasks) ; 手动读取 file-org-agenda-files变量 的指定文件的 "*+ TODO、*+ DOING、*+ WAIT" 的标题数量
    (kivnn/update-modeline-with-all-scripts)) ; 然后更新modeline状态栏

  ;; 设置快捷键
  (global-set-key (kbd "C-114514")                   'kivnn/update-modeline-output-agenda-tasks)
#+end_src

*** 3. 去除首次打开的 ~*Message*~ 与 ~*scratch*~

#+begin_src elisp
  (setq message-log-max nil)

  (defun kivnn/dashboard-mode-hook ()
    "保证一直关闭scratch，保证只关闭第一次Message"
    (setq-default kivnn/kill-scratch-buffer nil)
    (when (get-buffer "*scratch*") (kill-buffer "*scratch*"))
    (unless kivnn/kill-scratch-buffer
      (when (get-buffer "*Messages*")
        (kill-buffer "*Messages*")
        (setq-default kivnn/kill-scratch-buffer t))))

  (defun kivnn/view-echo-area-messages ()
    "设置message-log-max并打开*Message*的buffer"
    (interactive)
    (setq message-log-max 1000)
    (view-echo-area-messages))

  ;; 设置快捷键
  (global-set-key (kbd "C-114514")                   'kivnn/view-echo-area-messages)
#+end_src

*** 4. 魔改org-latex-preview默认的dvipng命令，并在此基础上添加xelatex-chinese处理引擎

**** (1) dvipng方案(dvi → png，130 DPI，字体思源雅黑CN(adobe-source-han-sans-cn-fonts))

#+begin_src sh
# C-h v dvipng-image-size-adjust
# (1.7 . 1.5)

# C-h v dvipng-latex-compiler
latex -interaction nonstopmode -output-directory %o %f

# C-h v dvipng-image-converter-dpi
# 130

# C-h v dvipng-image-converter
dvipng -D 130 -T tight -o %O %f

# C-h v dvipng-transparent-image-converter
convert -density 130 -background '#FFFFFF' -flatten -quality 100 %f %O
#+end_src

**** (2) xelatex-chinese方案(pdf → png，不能异步渲染，字体思源雅黑CN(adobe-source-han-sans-cn-fonts))

#+begin_src sh
# C-h v xelatex-chinese-latex-header
# "\\documentclass[11pt]{standalone}
#                               \\usepackage{fontspec}
#                               \\setmainfont{Source Han Sans CN}
#                               \\setsansfont{Source Han Sans CN}
#                               \\setmonofont{Source Han Sans CN}
#                               \\usepackage[usenames]{color}
#                               \\usepackage{amsmath}
#                               \\usepackage{extpfeil}
#                               \\pagestyle{empty}"

# C-h v xelatex-chinese-image-size-adjust
# (1.7 . 1.5)

# C-h v xelatex-chinese-latex-compiler
xelatex -interaction nonstopmode -output-directory %o %f

# C-h v xelatex-chinese-image-converter
convert -density 105 -background '#FFFFFF' -flatten -quality 100 %f %O
#+end_src

**** (3) 配置方法

坑点说明

#+begin_quote
  如果想通过 [某变量] 来整体控制LaTeX图片的背景颜色的话
  那么 dvipng 就不能加上 -bg Transparent 或 -bg White 的参数
  因为 dvipng 的此颜色参数，会覆盖后面的 imagemagick 的颜色转换
  导致将来在Emacs里预览时，颜色一直都将会是 Transparent 或 White 等颜色
#+end_quote

配置方法

#+begin_src elisp
;; =========================================================================================================
;;
;; 自定义dvipng引擎
;;
;; =========================================================================================================
;; 设置dvipng的调整图片大小
(defvar dvipng-image-size-adjust
  (read (format "(%f . %f)"
                variable-latex-fragment-adjust-width
                variable-latex-fragment-adjust-height)))

;; 设置latex编译器的生成dvi文件的行为
(defvar dvipng-latex-compiler
  (concat "latex"                         ; 使用latex编译器来生成.dvi文件
          " "
          "-interaction nonstopmode"      ; 编译时遇到错误也不停下，继续编译，防止Emacs因为一些上古LaTeX2e宏包的错误而卡住
          " "
          "-output-directory %o"          ; 在当前目录的临时目录下，输出编译出来的产物文件
          " "
          "%f"                            ; Emacs临时根据当前latex-fragment生成.tex源文件，并传入到前面的编译器来编译
          ))

;; 设置dvipng转换图片程序的从dvi生成到png的行为
(defvar dvipng-image-converter-dpi variable-ui-fonts-size)
(defvar dvipng-image-converter
  (concat
   "dvipng"                               ; 将之前得到的dvi文件，转换为png的引擎程序
   " "
   (format "-D %d"
           dvipng-image-converter-dpi)    ; 设置分辨率
   " "
   "-T tight"                             ; 自动裁剪边缘空白，防止出现大面积空白区域
   " "
   "-o %O"                                ; 在当前目录的临时目录下，输出编译出来的产物文件
   " "
   "%f"                                   ; 输入读取.dvi文件，来在下一步去转换为png文件
   ))

;; 设置imagemagick转换图片程序从png到更进一步的png的行为
(defvar dvipng-transparent-image-converter
  (concat
   "convert"                              ; convert也就是imagemagick
   " "
   (format "-density %d"                  ; 控制像素密度
         variable-ui-fonts-size)
   " "
   (format "-background '%s'"             ; 设置背景颜色
           variable-latex-fragment-background)
   " "
   "-flatten"                             ; 类似PS的合并图层，需要在-background后面使用，目的是将透明区域变成带RGB通道的区域
   " "
   (format "-quality %d"                  ; PNG 的压缩质量(对于 PNG 影响不大，对 JPEG 很重要)
           variable-latex-fragment-quality)
   " "
   "%f"                                   ; 输入读取.png文件，来载下一步去转换为magick这里设置出来的png文件
   " "
   "%O"                                   ; 输出magick这里设置出来的png文件的文件名占位符
   ))


;; ========================================
;; dvipng: 渲染非utf-8片段引擎
;; ========================================
;; 删除原本的
(setq org-preview-latex-process-alist
      (assq-delete-all 'dvipng org-preview-latex-process-alist))
;; 添加自己的
(setq org-preview-latex-process-alist
      `((dvipng
        :programs ("latex" "dvipng" "convert")
        :description "dvi > png"
        :message "you need to install the programs: latex and dvipng."
        :image-input-type "dvi"
        :image-output-type "png"
        :image-size-adjust ,dvipng-image-size-adjust
        :latex-compiler (,dvipng-latex-compiler)
        :image-converter (,dvipng-image-converter)
        :transparent-image-converter (,dvipng-transparent-image-converter))))



;; =========================================================================================================
;;
;; 自定义xelatex-chinese引擎
;;
;; =========================================================================================================
;; 设置dvipng的调整图片大小
(defvar xelatex-chinese-image-size-adjust
  (read (format "(%f . %f)"
                variable-latex-fragment-adjust-width
                variable-latex-fragment-adjust-height)))

;; 设置xelatex-chinese的latex头文件
(defvar xelatex-chinese-latex-header
  (format "\\documentclass[%s]{standalone}
                              \\usepackage{fontspec}
                              \\setmainfont{%s}
                              \\setsansfont{%s}
                              \\setmonofont{%s}
                              \\usepackage[usenames]{color}
                              \\usepackage{amsmath}
                              \\usepackage{extpfeil}
                              \\pagestyle{empty}"
          variable-latex-fragment-documentclass-base
          variable-ui-fonts-source
          variable-ui-fonts-source
          variable-ui-fonts-source))

;; 设置xelatex编译器的从pdf生成到png的行为
(defvar xelatex-chinese-latex-compiler
  (concat
   "xelatex"                                    ; 使用xelatex编译器来生成.pdf文件
   " "
   "-interaction nonstopmode"                   ; 编译时遇到错误也不停下，继续编译，防止Emacs因为一些上古LaTeX2e宏包的错误而卡住
   " "
   "-output-directory %o"                       ; 在当前目录的临时目录下，输出编译出来的产物文件
   " "
   "%f"                                         ; Emacs临时根据当前latex-fragment生成.tex源文件，并传入到前面的编译器来编译
   ))

;; 设置imagemagick转换图片程序从png到更进一步的png的行为
(defvar xelatex-chinese-image-converter
  (concat
   "convert"                                    ; convert也就是imagemagick
   " "
   (format "-density %d"
           (- variable-ui-fonts-size 25))       ; 控制像素密度
   " "
   (format "-background '%s'"
           variable-latex-fragment-background)  ; 设置背景颜色
   " "
   "-flatten"                                   ; 类似PS的合并图层，需要在-background后面使用，目的是将透明区域变成带RGB通道的区域
   " "
   (format "-quality %d"
           variable-latex-fragment-quality)     ; PNG 的压缩质量(对于 PNG 影响不大，对 JPEG 很重要)
   " "
   "%f"                                        ; 输入读取.png文件，来载下一步去转换为magick这里设置出来的png文件
   " "
   "%O"                                        ; 输出magick这里设置出来的png文件的文件名占位符
   ))


;; ========================================
;; xelatex-chinese: 渲染utf-8片段引擎
;; ========================================
(add-to-list 'org-preview-latex-process-alist
             `(xelatex-chinese
               :programs ("xelatex" "convert")
               :description "pdf > png"
               :message "you need to install the programs: xelatex and dvipng."
               :image-input-type "pdf"
               :image-output-type "png"
               :image-size-adjust ,xelatex-chinese-image-size-adjust
               :latex-header ,xelatex-chinese-latex-header
               :latex-compiler (,xelatex-chinese-latex-compiler)
               :image-converter (,xelatex-chinese-image-converter)))



;; =========================================================================================================
;;
;; 手动选择 org-preview-latex-default-process 来自由地切换在 dvipng(默认) 与 xelatex-chinese(自定义) 处理引擎
;;
;; =========================================================================================================
  (defvar variable-latex-fragment-left-bound  "\\\("                                          "[变量]: latex-fragment的左边界")
  (defvar variable-latex-fragment-right-bound "\\\)"                                          "[变量]: latex-fragment的右边界")

  (defun kivnn/org-latex-preview-format ()
    "渲染中文LaTeX片段之前的格式化"
    (interactive)
    ;; 找到左边界
    (let ((thing (thing-at-point 'line t)))
      (if (and thing (string-match (concat variable-latex-fragment-left-bound ".*" variable-latex-fragment-right-bound) thing))
          (search-backward variable-latex-fragment-left-bound nil t)
        (message "no such equation, please check again...")))
    (forward-char 2)
    (delete-all-space)
    ;; 找到右边界
    (let ((thing (thing-at-point 'line t)))
      (if (and thing (string-match (concat variable-latex-fragment-left-bound ".*" variable-latex-fragment-right-bound) thing))
          (search-forward variable-latex-fragment-right-bound nil t)
        (message "no such equation, please check again...")))
    (backward-char 3)
    (delete-all-space))

  (defun kivnn/org-latex-preview-engine ()
    "渲染中文LaTeX片段"
    (interactive)
    (let* ((latex-code (thing-at-point 'line t))
           (is-utf8 (and latex-code
                         (string-match (concat variable-latex-fragment-left-bound ".*" variable-latex-fragment-right-bound) latex-code)
                         (string-match-p "[^\x00-\x7F]" latex-code))))
      (if s-utf8
                                          ; 如果包含 UTF-8 字符，就使用 xelatex-chinese 引擎
          progn
        (setq org-preview-latex-default-process 'xelatex-chinese)
        (message "目前使用了xelatex-chinese引擎渲染此LaTeX片段"))
      ;; 如果不包含 UTF-8 字符，就使用 dvipng、dvisvgm、imagemagick 引擎
      (setq org-preview-latex-default-process 'dvipng)
      (message "目前使用了org-mode默认的dvipng、dvisvgm、imagemagick引擎渲染此LaTeX片段"))
    (org-latex-preview)
    ;; 每次执行完毕后都恢复为 dvipng、dvisvgm、imagemagick 引擎
    (setq org-preview-latex-default-process 'dvipng)
    (message "Creating Latex previews in section...(and recover dvipng...) done.")))

  (defun kivnn/org-latex-preview ()
    "无视fontspec包的定死字体大小的限制，强制渲染指定字体大小的LaTeX片段(才发现这个函数含金量这么足)"
    (interactive)
    (kivnn/org-latex-preview-format)
    (kivnn/org-latex-preview-engine))

  (define-key org-mode-map (kbd "C-1919810")             'kivnn/org-latex-preview)                          ; 无视fontspec包的定死字体大小的限制，强制渲染指定字体大小的LaTeX片段
#+end_src
